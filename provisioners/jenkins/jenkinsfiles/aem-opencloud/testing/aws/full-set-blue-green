@Library('aem-opencloud-manager') _
def configString = libraryResource 'aem_opencloud/config.json'
def config = readJSON text: configString
def getDate() {
  Date date = new Date()
  return date.format('yyyyMMdd') as String
}
def genId() {
  return UUID.randomUUID().toString().split('-')[-1]
}
def date = getDate()
def id = genId()
pipeline {
    agent {
        docker {
            image params.JENKINS_AGENT_DOCKER_IMAGE
            args params.JENKINS_AGENT_DOCKER_ARGS
        }
    }
    environment {
        TMPDIR = "/tmp/shinesolutions/aem-opencloud-manager"
    }
    parameters {
        string(name: 'AOC_VERSION_AEM_AWS_STACK_BUILDER', defaultValue: config.library.aem_aws_stack_builder, description: 'Version of aem-aws-stack-builder repo to archive')
        string(name: 'AOC_VERSION_AEM_STACK_MANAGER_MESSENGER', defaultValue: config.library.aem_stack_manager_messenger, description: 'Version of aem-stack-manager-messenger repo')
        string(name: 'AOC_VERSION_AEM_TEST_SUITE', defaultValue: config.library.aem_test_suite, description: 'Version of aem-test-suite repo to archive')
        string(name: 'SOURCE_AUTHOR_SNAPSHOT_ID', defaultValue: '', description: 'Source Snapshot ID from the Author repository')
        string(name: 'SOURCE_PUBLISH_SNAPSHOT_ID', defaultValue: '', description: 'Source Snapshot ID from the Publish repository')
        string(name: 'SOURCE_SNAPSHOT_STACK_PREFIX', defaultValue: '', description: 'Source Stack Prefix to get source Snapshot IDs from.')
        string(name: 'STACK_MANAGER_STACK_PREFIX', defaultValue: 'aoc-sm-' + id, description: 'Stack Manager Stack Prefix to create for the test.')
        string(name: 'STACK_PREFIX_BLUE', defaultValue: 'aoc-fs-blue-' + id, description: 'AEM Blue Stack Stack Prefix to create for the test.')
        string(name: 'STACK_PREFIX_GREEN', defaultValue: 'aoc-fs-green-' + id, description: 'AEM Green Stack Stack Prefix to create for the test.')
    }
    stages {
        stage('Initialise Jenkins pipeline') {
            steps {
              script {
                  if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                      slackSend (color: '#FFFF00', message: "START: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                  }
              }
                JenkinsInit(this, params.AOC_CUSTOM_MANAGER_STEPS_ARTIFACT_URL, env.TMPDIR)
                JenkinsPipelinePreStep this
            }
        }
        stage('Create AEM Stack Manager environment') {
            steps {
                    build job: "../../../manage-environments/aws/${params.AOC_STACK_MANAGER_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}/create-stack-manager/",
                    parameters: [
                      booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                      string(name: 'AOC_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER', value: params.AOC_STACK_MANAGER_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER),,
                      string(name: 'STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX)
                    ]
            }
        }
        stage('Create blue AEM environment') {
            steps {
                    build job: "../../../manage-environments/aws/${params.AOC_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}-${AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}-${AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/create-full-set/",
                    parameters: [
                      booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                      string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_BLUE),
                      string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                      string(name: 'AOC_CONFIG_ARTIFACT_URL', value: params.AOC_CONFIG_ARTIFACT_URL),
                      string(name: 'AOC_DEPLOYMENT_DESCRIPTOR_URL', value: params.AOC_DEPLOYMENT_DESCRIPTOR_URL),
                      string(name: 'AOC_EXPORT_DESCRIPTOR_URL', value: params.AOC_EXPORT_DESCRIPTOR_URL),
                      string(name: 'AOC_CUSTOM_STACK_PROVISIONER_ARTIFACT_URL', value: params.AOC_CUSTOM_STACK_PROVISIONER_ARTIFACT_URL),
                      string(name: 'AOC_CONTENT_HEALTHCHECK_DESCRIPTOR_URL', value: params.AOC_CONTENT_HEALTHCHECK_DESCRIPTOR_URL),
                      string(name: 'SOURCE_AUTHOR_SNAPSHOT_ID', value: params.SOURCE_AUTHOR_SNAPSHOT_ID),
                      string(name: 'SOURCE_PUBLISH_SNAPSHOT_ID', value: params.SOURCE_PUBLISH_SNAPSHOT_ID),
                      string(name: 'SOURCE_SNAPSHOT_STACK_PREFIX', value: params.SOURCE_SNAPSHOT_STACK_PREFIX)
                    ]
            }
        }
        stage('Deploy applications on blue AEM environment') {
            steps {
                      build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/deploy-artifacts-full-set/",
                      parameters: [
                        booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                        string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_BLUE),
                        string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                        string(name: 'AOC_DEPLOYMENT_DESCRIPTOR_URL', value: params.AOC_DEPLOYMENT_DESCRIPTOR_URL)

                      ]
            }
        }
        stage('Check Blue Stack after deployment') {
            steps {
                      build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/check-readiness-full-set/",
                      parameters: [
                        booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                        string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_BLUE),
                        string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                      ]
            }
        }
        stage('Check Content ALARM State is OK on blue AEM environment') {
            steps {
              build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/test-contenthealthcheck-alarm/${params.AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/",
              parameters: [
                booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_BLUE),
              ]
          }
        }
        stage('Run SM-Event offline-snapshot on blue AEM environment') {
            steps {
              build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/offline-snapshot-full-set/",
              parameters: [
                booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_BLUE),
                string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
              ]
            }
        }
        stage('Check environment readiness after offline-snapshot') {
            steps {
              build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/check-readiness-full-set/",
              parameters: [
                booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_BLUE),
                string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
              ]
            }
        }
        stage('Create green AEM environment') {
            steps {
                    build job: "../../../manage-environments/aws/${params.AOC_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}-${AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}-${AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/create-full-set/",
                    parameters: [
                      booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                      string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_GREEN),
                      string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                      string(name: 'AOC_CONFIG_ARTIFACT_URL', value: params.AOC_CONFIG_ARTIFACT_URL),
                      string(name: 'AOC_DEPLOYMENT_DESCRIPTOR_URL', value: params.AOC_DEPLOYMENT_DESCRIPTOR_URL),
                      string(name: 'AOC_EXPORT_DESCRIPTOR_URL', value: params.AOC_EXPORT_DESCRIPTOR_URL),
                      string(name: 'AOC_CUSTOM_STACK_PROVISIONER_ARTIFACT_URL', value: params.AOC_CUSTOM_STACK_PROVISIONER_ARTIFACT_URL),
                      string(name: 'AOC_CONTENT_HEALTHCHECK_DESCRIPTOR_URL', value: params.AOC_CONTENT_HEALTHCHECK_DESCRIPTOR_URL),
                      string(name: 'SOURCE_SNAPSHOT_STACK_PREFIX', value: params.STACK_PREFIX_BLUE)
                    ]
            }
        }
        stage('Deploy applications on green AEM environment') {
            steps {
                      build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/deploy-artifacts-full-set/",
                      parameters: [
                        booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                        string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_GREEN),
                        string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                        string(name: 'AOC_DEPLOYMENT_DESCRIPTOR_URL', value: params.AOC_DEPLOYMENT_DESCRIPTOR_URL)

                      ]
            }
        }
        stage('Check green Stack after deployment') {
            steps {
                      build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/check-readiness-full-set/",
                      parameters: [
                        booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                        string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_GREEN),
                        string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
                      ]
            }
        }
        stage('Check Content ALARM State is OK on green AEM environment') {
            steps {
              build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/test-contenthealthcheck-alarm/${params.AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/",
              parameters: [
                booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_GREEN),
              ]
          }
        }
        stage('Run SM-Event offline-snapshot on green AEM environment') {
            steps {
              build job: "../../../operational-tasks/${params.AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}/offline-snapshot-full-set/",
              parameters: [
                booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
                string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_GREEN),
                string(name: 'STACK_MANAGER_STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
              ]
            }
        }
    }
    post {
        always {
          build job: "../../../manage-environments/aws/${params.AOC_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}-${AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}-${AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/delete-full-set/",
          parameters: [
            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
            string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_BLUE)
          ]
          build job: "../../../manage-environments/aws/${params.AOC_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}-${AOC_CONFIG_PROFILE_AEM_STACK_MANAGER_MESSENGER}-${AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/delete-full-set/",
          parameters: [
            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
            string(name: 'STACK_PREFIX', value: params.STACK_PREFIX_GREEN)
          ]
          build job: "../../../manage-environments/aws/${params.AOC_STACK_MANAGER_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER}/delete-stack-manager/",
          parameters: [
            booleanParam(name: 'ENABLE_SLACK_NOTIFICATIONS', value: params.ENABLE_SLACK_NOTIFICATIONS),
            string(name: 'AOC_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER', value: params.AOC_STACK_MANAGER_CONFIG_PROFILE_AEM_AWS_STACK_BUILDER),
            string(name: 'STACK_PREFIX', value: params.STACK_MANAGER_STACK_PREFIX),
          ]
          JenkinsPipelinePostStep this
        }
        success {
          script {
            if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                slackSend (color: '#00FF00', message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
          }
        }
        failure {
          script {
            if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                slackSend (color: '#FF0000', message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
          }
        }
    }
}
