@Library('aem-opencloud-manager') _
def configString = libraryResource 'aem_opencloud/config.json'
def config = readJSON text: configString
pipeline {
    agent {
        docker {
            label params.JENKINS_AGENT_LABEL
            image params.JENKINS_AGENT_DOCKER_IMAGE
            args params.JENKINS_AGENT_DOCKER_ARGS
        }
    }
    environment {
        TMPDIR = "/tmp/shinesolutions/aem-opencloud-manager"
        JENKINS_ANSIBLE_INVENTORY = "${WORKSPACE}/conf/ansible/inventory/hosts"
        ANSIBLE_PLAYBOOK_PATH = "${WORKSPACE}/provisioners/ansible/playbooks/jenkins"
    }
    stages {
        stage('Initialise pipeline') {
            steps {
                script {
                    if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                        slackSend (color: '#FFFF00', message: "START: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                    }
                }
                JenkinsInit(this, params.AOC_CUSTOM_MANAGER_STEPS_ARTIFACT_URL, env.TMPDIR)
                JenkinsPipelinePreStep this
            }
        }
        stage('Encrypt AWS AEM OpenCloud Snapshots') {
            steps {
                    JenkinsStagePreStep this
                    ansiblePlaybook inventory: env.JENKINS_ANSIBLE_INVENTORY,
                      playbook: "${env.ANSIBLE_PLAYBOOK_PATH}/encrypt-unencrypted-aws-snapshots.yaml",
                      extraVars: [
                        snapshot_type: params.SNAPSHOT_TYPE,
                        snapshot_ids: params.SNAPSHOT_IDS,
                        kms_key_id: params.KMS_KEY_ID,
                        wait_time: params.WAIT_TIME,
                        remove_unencrypted: params.REMOVE_UNENCRYPTED,
                        source_aws_region: params.SOURCE_AWS_REGION
                      ]
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
    }
    post {
        always {
          JenkinsPipelinePostStep this
        }
        success {
          script {
            if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                slackSend (color: '#00FF00', message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
          }
        }
        failure {
          script {
            if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                slackSend (color: '#FF0000', message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
          }
        }
    }
}
