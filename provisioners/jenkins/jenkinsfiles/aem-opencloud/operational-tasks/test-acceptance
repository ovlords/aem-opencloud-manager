@Library('aem-opencloud-manager') _

def configString = libraryResource 'aem_opencloud/config.json'
def config = readJSON text: configString

pipeline {
    agent {
        docker {
            image params.JENKINS_AGENT_DOCKER_IMAGE
            args params.JENKINS_AGENT_DOCKER_ARGS
        }
    }
    environment {
        TMPDIR = "/tmp/shinesolutions/aem-opencloud-manager"
        AOC_CONFIG_DIR = "${env.TMPDIR}/aem-opencloud-config"
        AOC_CONFIG_PROFILE_DIR_AEM_TEST_SUITE = "${env.AOC_CONFIG_DIR}/aem-test-suite/${params.AOC_CONFIG_PROFILE_AEM_TEST_SUITE}/"

    }
    parameters {
        string(name: 'AOC_VERSION_AEM_TEST_SUITE', defaultValue: config.library.aem_test_suite, description: 'Version of aem-test-suite repo to archive')
    }
    stages {
        stage('Initialise pipeline') {
            steps {
                script {
                    if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                        slackSend (color: '#FFFF00', message: "START: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                    }
                }
                JenkinsInit(this, params.AOC_CUSTOM_MANAGER_STEPS_ARTIFACT_URL, env.TMPDIR)
                JenkinsPipelinePreStep this
            }
        }
        stage('Prepare libraries') {
            steps {
                    JenkinsStagePreStep this
                    AocPrepareLibrary(this, "aem-test-suite", params.AOC_VERSION_AEM_TEST_SUITE, params.AWS_LIBRARY_S3_BUCKET, params.AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareConfig(this, params.AOC_CONFIG_ARTIFACT_URL, env.TMPDIR)
            }
            post {
                always {

                    JenkinsStagePostStep this
                }
            }
        }
        stage('Resolve dependencies') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make deps")
            }
            post {
                always {
                    JenkinsStagePostStep this
                }
            }
        }
        stage('Prepare configuration') {
            steps {
                    JenkinsStagePreStep this
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make config-aem-aws config_path=${env.AOC_CONFIG_PROFILE_DIR_AEM_TEST_SUITE}")
            }
            post {
                always {
                    JenkinsStagePostStep this
                }
            }
        }
        stage('Architecture') {
            steps {
                JenkinsStagePreStep this
                ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-architecture-${params.AEM_ARCHITECTURE} config_path=${env.AOC_CONFIG_PROFILE_DIR_AEM_TEST_SUITE} stack_prefix=${params.STACK_PREFIX}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Author-Primary') {
            steps {
                JenkinsStagePreStep this
                ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-author-primary config_path=${env.AOC_CONFIG_PROFILE_DIR_AEM_TEST_SUITE} stack_prefix=${params.STACK_PREFIX}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Author-Standby') {
            steps {
                JenkinsStagePreStep this
                ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-author-standby config_path=${env.AOC_CONFIG_PROFILE_DIR_AEM_TEST_SUITE} stack_prefix=${params.STACK_PREFIX}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Publish') {
            steps {
                JenkinsStagePreStep this
                ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-publish config_path=${env.AOC_CONFIG_PROFILE_DIR_AEM_TEST_SUITE} stack_prefix=${params.STACK_PREFIX}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Author-Dispatcher') {
            steps {
                JenkinsStagePreStep this
                ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-author-dispatcher config_path=${env.AOC_CONFIG_PROFILE_DIR_AEM_TEST_SUITE} stack_prefix=${params.STACK_PREFIX}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Publish-Dispatcher') {
            steps {
                JenkinsStagePreStep this
                ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-publish-dispatcher config_path=${env.AOC_CONFIG_PROFILE_DIR_AEM_TEST_SUITE} stack_prefix=${params.STACK_PREFIX}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Orchestrator') {
            steps {
                JenkinsStagePreStep this
                ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-orchestrator config_path=${env.AOC_CONFIG_PROFILE_DIR_AEM_TEST_SUITE} stack_prefix=${params.STACK_PREFIX}")
            }
            post {
                always {
                  JenkinsStagePostStep this
                }
            }
        }
    }
    post {
        always {
          JenkinsPipelinePostStep this
        }
        success {
          script {
            if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                slackSend (color: '#00FF00', message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
          }
        }
        failure {
          script {
            if (params.ENABLE_SLACK_NOTIFICATIONS == true) {
                slackSend (color: '#FF0000', message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
          }
        }
    }
}
